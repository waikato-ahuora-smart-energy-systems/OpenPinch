# .github/workflows/ci-publish.yml
name: CI & Publish

on:
  push:
    branches: [ "main" ]
    paths-ignore: [ ".github/**", ".vscode/**" ]
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  id-token: write  # used later for publishing

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: "3.12"
          cache: pip
      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install -e . pytest
      - name: Run tests
        run: pytest -q

  bump-project-version:
    runs-on: ubuntu-latest
    needs: test
    outputs:
      bumped: ${{ steps.bump.outputs.bumped }}
      previous_version: ${{ steps.bump.outputs.previous-version }}
      current_version: ${{ steps.bump.outputs.current-version }}
      new_commit_hash: ${{ steps.commit.outputs.hash }}
      release_branch: ${{ steps.rename.outputs.name }}
      pr_number: ${{ steps.pr.outputs.number }}
    steps:
      - name: Checkout (full history for tags/branches)
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          fetch-depth: 0

      - name: Configure git user
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

      # Create a release branch BEFORE bumping so we never touch main directly
      - name: Prepare release branch
        id: branch
        run: |
          git switch -c release/prepare
          echo "name=release/prepare" >> "$GITHUB_OUTPUT"

      # Do NOT pass github-token so the action doesn't auto-push to main
      - name: Bump Python project version
        id: bump
        uses: callowayproject/bump-my-version@master
        env:
          BUMPVERSION_TAG: "true"
        with:
          args: "patch"

      - name: Report version change
        if: steps.bump.outputs.bumped == 'true'
        run: |
          echo "Version was bumped from ${{ steps.bump.outputs.previous-version }} to ${{ steps.bump.outputs.current-version }}!"

      # Rename the temp release branch to include the version
      - name: Rename branch to versioned name
        if: steps.bump.outputs.bumped == 'true'
        id: rename
        env:
          VER: ${{ steps.bump.outputs.current-version }}
        run: |
          NEW_BRANCH="release/v${VER}"
          git branch -m "${NEW_BRANCH}"
          echo "name=${NEW_BRANCH}" >> "$GITHUB_OUTPUT"

      - name: Get commit hash
        id: commit
        run: echo "hash=$(git rev-parse HEAD)" >> $GITHUB_OUTPUT

      # Push ONLY the release branch + tags (NOT main) using the push action
      - uses: ad-m/github-push-action@master
        if: steps.bump.outputs.bumped == 'true'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.rename.outputs.name }}  # push release/vX.Y.Z
          tags: true                                # push tags created by bump

      # Create PR from release branch back to main
      - name: Create pull request
        if: steps.bump.outputs.bumped == 'true'
        id: pr
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          TITLE="chore(release): v${{ steps.bump.outputs.current-version }}"
          BODY=$'Automated version bump from '"${{ steps.bump.outputs.previous-version }}"$' to '"${{ steps.bump.outputs.current-version }}"$'\n\nThis PR was generated by CI.'
          # Create (or get existing) PR
          if gh pr view --head "${{ steps.rename.outputs.name }}" --json number >/dev/null 2>&1; then
            NUM=$(gh pr view --head "${{ steps.rename.outputs.name }}" --json number -q .number)
          else
            NUM=$(gh pr create --title "$TITLE" --body "$BODY" --base main --head "${{ steps.rename.outputs.name }}" --json number -q .number)
          fi
          echo "number=$NUM" >> "$GITHUB_OUTPUT"

      # Auto-approve the PR using a PAT from a reviewer-capable account
      - name: Approve PR
        if: steps.bump.outputs.bumped == 'true'
        env:
          GH_TOKEN: ${{ secrets.BOT_PAT }}  # PAT from a reviewer-capable account
        run: gh pr review ${{ steps.pr.outputs.number }} --approve

      # Enable auto-merge (squash). GitHub merges once required checks pass.
      - name: Enable auto-merge (squash)
        if: steps.bump.outputs.bumped == 'true'
        env:
          GH_TOKEN: ${{ secrets.BOT_PAT }}
        run: |
          gh pr merge ${{ steps.pr.outputs.number }} --squash --auto --delete-branch || true

  build:
    runs-on: ubuntu-latest
    needs: bump-project-version
    if: needs.bump-project-version.outputs.bumped == 'true'
    steps:
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8
        with:
          ref: ${{ needs.bump-project-version.outputs.new_commit_hash }}
      - name: Set up Python
        uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065
        with:
          python-version: "3.12"
          cache: pip
      - name: Build sdist/wheel
        run: |
          python -m pip install --upgrade pip
          pip install build
          python -m build
      - name: Upload dist as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02
        with:
          name: openpinch-dist
          path: dist/*

  publish-testpypi:
    needs: build
    runs-on: ubuntu-latest
    permissions:
      id-token: write   # required for Trusted Publishing (even to TestPyPI)
      contents: read
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16
        with:
          name: openpinch-dist
          path: dist
      - name: Publish to TestPyPI (Trusted Publishing)
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/

  publish-pypi:
    needs: publish-testpypi
    runs-on: ubuntu-latest
    environment:
      name: pypi
      url: https://pypi.org/project/OpenPinch/
    permissions:
      id-token: write   # required for Trusted Publishing
      contents: read
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@fa0a91b85d4f404e444e00e005971372dc801d16
        with:
          name: openpinch-dist
          path: dist
      - name: Publish to PyPI (Trusted Publishing)
        uses: pypa/gh-action-pypi-publish@release/v1
